# Import the libraries
%matplotlib inline
import yfinance as yf
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt

# Analyse expected performance current portfolio
def portfolio_analysis(assets, weights, startdate, enddate):
    weights = np.array(weights)
    df = pd.DataFrame()
    for stock in assets:
        df[stock]= yf.download(stock, start= startdate, end = enddate)['Adj Close']  
    returns = df.pct_change()
    cov_matrix_annual = returns.cov() * 252
    cov_matrix_annual
    port_variance = np.dot(weights.T, np.dot(cov_matrix_annual, weights))
    port_volatility = np.sqrt(port_variance)
    portfolioSimpleAnnualReturn = np.sum(returns.mean() * weights) * 252
    percent_var = str(round(port_variance, 2) * 100) + '%'
    percent_vols = str(round(port_volatility, 2) * 100) + '%'
    percent_ret = str(round(portfolioSimpleAnnualReturn, 2) * 100) + '%'

    print('Expected annual return: ' + percent_ret )
    print('Annual volatility/risk: ' +percent_vols)
    print('Annual variance: ' + percent_var)
    
# Portfolio Optimization
def portfolio_opt(amount, assets, startdate, enddate):
    df = pd.DataFrame()
    for stock in assets:
        df[stock]= yf.download(stock, start= startdate, end = enddate)['Adj Close']  
    from pypfopt.efficient_frontier import EfficientFrontier
    from pypfopt import risk_models
    from pypfopt import expected_returns
    
    # Calculate the expected returns and the annualised sample covariance matrix of returns 
    mu = expected_returns.mean_historical_return(df)
    S = risk_models.sample_cov(df)
    
    # optimize for max sharpe ratio
    print('######Optimized Portfolio######')
    ef = EfficientFrontier(mu, S)
    weights = ef.max_sharpe()
    cleaned_weights = ef.clean_weights() # can use custom threshold weights
    print(cleaned_weights)
    ef.portfolio_performance(verbose = True)
    
    print('######Discrete Allocation of the Each Shares######')
    # Get the discrete allocation of each share per stock
    from pypfopt.discrete_allocation import DiscreteAllocation, get_latest_prices

    latest_prices = get_latest_prices(df)
    weights = cleaned_weights
    da = DiscreteAllocation(weights, latest_prices, total_portfolio_value = amount)

    allocation, leftover = da.lp_portfolio()
    print('Total Investment:', amount, 'USD')
    print('Discrete allocation:', allocation)
    print('Funds remaining: ${: .2f}'.format(leftover)) 
    
# Try with stocks
portfolio_analysis(['FB','AMZN','AAPL','NFLX','GOOG'], [0.2 , 0.2 , 0.2 , 0.2 , 0.2], '2010-01-01', '2021-10-03')
portfolio_opt(10000, ['FB','AMZN','AAPL','NFLX','GOOG'], '2010-01-01', '2021-10-03')
